apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'java'

def projectURI = 'https://raw.github.com/abhijitsarkar/gradle/master/gradle-common'

def props = new Properties()
new URL("${projectURI}/gradle.properties").withInputStream {
    stream -> props.load(stream)
}

def config = new ConfigSlurper().parse(props)

sourceCompatibility = props['projectSourceCompatibility']
targetCompatibility = props['projectSourceCompatibility']

group = props['projectGroup']
version = props['projectVersion']

def tempDir = file("${System.properties['java.io.tmpdir']}/gradle-common")

/* Download PMD rule set to local. PMD does not accept a URI. */
afterEvaluate {
    def pmdRuleSet = file("${tempDir}/ruleset.xml")

    if (!pmdRuleSet.exists()) {
        tempDir.mkdirs()

        download("${projectURI}/src/main/config/pmd/ruleset.xml", tempDir.absolutePath)
    } else {
        println "Found PMD ruleset at ${pmdRuleSet}."
    }

    pmd {
        toolVersion = props['pmdVersion']
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        targetJdk = props['projectSourceCompatibility']
        ruleSetFiles = files("${tempDir}/ruleset.xml")
    }
}

def download(address, downloadLocation = "${tempDir}") {
    def f = new File(downloadLocation, address.tokenize("/")[-1])
    def fos = new FileOutputStream(f)
    def out = new BufferedOutputStream(fos)
    out << new URL(address).openStream()
    out.close()

    println "Downloaded ${address} to ${f.absolutePath}."

    f.absolutePath
}

configurations {
    provided
}

repositories {
    mavenCentral()
}

findbugs {
    toolVersion = props['findbugsVersion']
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    reportsDir = file("${buildDir}/reports/findbugs")
    effort = 'default'
}

tasks.withType(Pmd) {
    it.onlyIf { !project.hasProperty('skipCoverage') }
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(FindBugs) {
    it.onlyIf { !project.hasProperty('skipCoverage') }
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jacoco {
    toolVersion = props['jacocoVersion']
}

jacocoTestReport {
    reports {
        html.destination "${buildDir}/reports/jacoco"
    }
}

dependencies {
    provided(
            [group: 'org.slf4j', name: 'slf4j-api', version: props['slf4jVersion']],
            [group: 'ch.qos.logback', name: 'logback-core', version: props['logbackVersion']],
            [group: 'ch.qos.logback', name: 'logback-classic', version: props['logbackVersion']]
    )
    testCompile(
            [group: 'junit', name: 'junit', version: props['junitVersion']]
    )
    pmd([group: 'net.sourceforge.pmd', name: 'pmd', version: props['pmdVersion']])
    findbugs([group: 'com.google.code.findbugs', name: 'findbugs', version: props['findbugsVersion']])
    jacocoAnt([group: 'org.jacoco', name: 'org.jacoco.ant', version: props['jacocoVersion']])
    jacocoAgent([group: 'org.jacoco', name: 'org.jacoco.agent', version: props['jacocoVersion']])

}

sourceSets {
    [main, test].each {
        it.compileClasspath += configurations.provided
        it.runtimeClasspath += configurations.provided

        it.output.resourcesDir = project.file("$buildDir/classes/${it.name}")
    }
}

jar { manifest.attributes provider: 'Abhijit Sarkar' }

rootProject.tasks['wrapper'].configure {
    gradleVersion = props['gradleVersion']
}
